from typing import Optional
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder



async def launch_solution(
        launch_type: str,
        number_match: str = None
) -> InlineKeyboardMarkup | None:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –µ–≥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ

    :param launch_type: —Ç–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–∞
    :param number_match:
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—É—Å–∫" –∏ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ".
    """
    try:
        builder = InlineKeyboardBuilder()

        if launch_type == 'creation': # created_match
            confirm_callback = f'confirm_{launch_type}'
            restart_callback = f'restart_{launch_type}'
        elif number_match and (launch_type == 'FormEmissionNatCurrency'):
            confirm_callback = f'Confirm{launch_type}'
            restart_callback = f'Restart{launch_type}_{number_match}'
        elif number_match and (launch_type == 'FormBankTransfer'):
            confirm_callback = f'Confirm{launch_type}'
            restart_callback = f'Restart{launch_type}_{number_match}'
        else:
            raise Exception('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "result - else".')

        builder.add(
            InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—É—Å–∫', callback_data=confirm_callback),
            InlineKeyboardButton(text='üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data=restart_callback)
        )

        builder.adjust(1)

        return builder.as_markup()
    except Exception as error:
        print(f'–û—à–∏–±–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã app.keyboards.universal.launch_solution: {error}')
        return None


async def verify_request_by_admin(
        request_type: str,
        number_match: str,
        unique_word: Optional[str] = None,
        telegram_id_user: Optional[int] = None
) -> InlineKeyboardMarkup | None:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

    :param telegram_id_user: –¢–µ–ª–µ–≥—Ä–∞–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É
    :param request_type: –¢–∏–ø –∑–∞—è–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'RequestCountryByAdmin' –∏–ª–∏ 'RequestFormEmisNatCur'.
    :param number_match: –ù–æ–º–µ—Ä –º–∞—Ç—á–∞.
    :param unique_word: (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.
    """
    try:
        builder = InlineKeyboardBuilder()

        if unique_word and (request_type == 'RequestCountryByAdmin'):
            confirm_callback = f'Confirm{request_type}_{unique_word}_{number_match}'
            reject_callback = f'Reject{request_type}_{unique_word}_{number_match}'
        elif request_type == 'RequestFormEmisNatCur':
            confirm_callback = f'Confirm{request_type}_{number_match}_{telegram_id_user}'
            reject_callback = f'Reject{request_type}_{number_match}_{telegram_id_user}'
        else:
            raise Exception('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "result - else".')

        builder.add(
            InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data=confirm_callback),
            InlineKeyboardButton(text='‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data=reject_callback)
        )

        builder.adjust(1)

        return builder.as_markup()
    except Exception as error:
        print(f'–û—à–∏–±–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã app.keyboards.universal.verify_request_by_admin: {error}')
        return None
