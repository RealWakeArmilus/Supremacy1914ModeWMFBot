from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton, \
    ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder

import app.DatabaseWork.master as master_db
import app.DatabaseWork.match as match_db

from app.message_designer.hashzer import hash_callback_suffix_64_name_state


admin_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É', callback_data='created_match')],
    [InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ä—Ç', callback_data='settings_match')]
])


types_map = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='–í–µ–ª–∏–∫–∞—è –≤–æ–π–Ω–∞')]],
    resize_keyboard=True
)


confirm_created_map = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ', callback_data='confirm_creation')],
    [InlineKeyboardButton(text='üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='restart_creation')]
])


async def numbers_match(input_match_hash: str = None) -> InlineKeyboardMarkup | None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ä—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö master —Ç–∞–±–ª–∏—Ü–µ match, –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–µ—Ç—Å—è None —Ö—ç—à—Ç–µ–≥, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –ï—Å–ª–∏ –æ–Ω–∏ –≤—Å–µ —Ç–∞–∫–∏ –µ—Å—Ç—å, —Ç–æ input_match_hash –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö—ç—à—Ç–µ–≥ –ø–æ–∏—Å–∫–∞, –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è –≤ callback

    :param input_match_hash: —É–∫–∞–∂–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã callback –∏—Ö –æ—Ç—Å–ª–µ–¥–∏–ª (–ø—Ä–∏–º–µ—Ä: 'SettingMatch')
    :return:
    """
    numbers = await master_db.get_numbers_match()

    if numbers:

        builder = InlineKeyboardBuilder()

        for number in numbers:
            button = InlineKeyboardButton(text=str(number), callback_data=f"{input_match_hash}_{number}")
            builder.add(button)

        builder.adjust(3)

        return builder.as_markup()

    else:
        return None


async def edit_match(number_match: str) -> InlineKeyboardMarkup:
    delete_button = InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"DeleteMatch_{number_match}")
    return InlineKeyboardMarkup(inline_keyboard=[[delete_button]])


async def free_states_match(input_match_hash: str, number_match_db: str) -> InlineKeyboardMarkup | None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã —Ç–∞–±–ª–∏—Ü–µ states, –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–µ—Ç—Å—è None —Ö—ç—à—Ç–µ–≥, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –ï—Å–ª–∏ –æ–Ω–∏ –≤—Å–µ —Ç–∞–∫–∏ –µ—Å—Ç—å, —Ç–æ input_match_hash –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö—ç—à—Ç–µ–≥ –ø–æ–∏—Å–∫–∞, –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è –≤ callback


    :param input_match_hash: —É–∫–∞–∂–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã callback –∏—Ö –æ—Ç—Å–ª–µ–¥–∏–ª (–ø—Ä–∏–º–µ—Ä: 'ChoiceStateFromMatch_')
    :param number_match_db:
    :return:
    """
    names_state = await match_db.get_free_states_from_match_for_user(number_match_db)

    if names_state:

        builder = InlineKeyboardBuilder()

        for name_state in names_state:

            callback_data = f"{input_match_hash}_{name_state}"

            hash_callback_data = await hash_callback_suffix_64_name_state(input_match_hash, callback_data, name_state)

            # Ensure callback_data is not None and within limits
            if not hash_callback_data:
                continue  # Skip this button if callback_data is invalid


            button = InlineKeyboardButton(text=str(name_state), callback_data=hash_callback_data)
            builder.add(button)

        builder.adjust(1)

        return builder.as_markup()

    else:
        return None




